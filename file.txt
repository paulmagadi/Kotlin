Creating a triangle using a nested for-loop

fun main() {
    for (i in 1..5) {
        for (j in 1..i) {
            print("*")
        }
        println()
    }
}


Parametrizing a triangle

fun main() {
    val height = 10
    for (i in 1..height) {
        for (j in 1..i) {
            print("*")
        }
        println()
    }
}


downTo function
You've also learned how to make a triangle that starts with five stars and ends with one.

fun main() {
    for (i in 1..5) {
        val numberOfStars = 6 - i
        for (j in 1..numberOfStars) {
            print("*")
        }
        println()
    }
}

There is also an alternative way to implement that. You can use the downTo function, and in such a case, the for-loop variable does not indicate what the row number is. Instead, it indicates how many stars you should have in the following row. 

fun main() {
    for (numberOfStars in 5 downTo 1) {
        for (i in 1..numberOfStars) {
            print("*")
        }
        println()
    }
}


It can also be easily parametrized to a certain height:

fun main() {
    val height = 10
    for (numberOfStars in height downTo 1) {
        for (j in 1..numberOfStars) {
            print("*")
        }
        println()
    }
}

How do you produce it? 
The answer is to first make one triangle and then another one. Notice that in this triangle, you add two stars at each step until the desired width is reached. Let's assume that you will parametrize your triangle by its maximal width. Then you will use one for-loop printing upper stars. So it should start at 1 star, make step 2, and add until width. The second for-loop will start at width, go down to 1, with a step 2. Notice that in the first for-loop, you should use until instead of .., because if you don't, then the width number of stars will be printed twice: both by the first and by the second for-loop.


fun main() {
    val width = 5
    for (i in 1 until width step 2) {
        for (j in 1..i) {
            print("*")
        }
        println()
    }
    for (i in width downTo 1 step 2) {
        for (j in 1..i) {
            print("*")
        }
        println()
    }
}


fun main() {
    for (i in 1..5) {
        val numberOfSpaces = 5 - i
        for (j in 1..numberOfSpaces) {
            print(" ")
        }
        val numberOfStars = i
        for (j in 1..numberOfStars) {
            print("*")
        }
        println()
    }
}